// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User entity for authentication/authorization
model User {
  id              Int          @id @default(autoincrement()) // Changed to incremental ID
  email           String       @unique
  password_hash   String
  name            String?
  role            UserRole     @default(VIEWER)
  organization_id String       // Required field for organization relation
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@map("users")
}

// Organization entity for multi-tenancy
model Organization {
  id          String        @id @default(uuid())
  name        String        @unique
  plan        Plan          @default(FREE_PLAN)
  users       User[]
  Application Application[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@map("organizations")
}

// Application/Service entity
model Application {
  id          String   @id @default(uuid())
  name        String   @unique
  version     String?
  environment String   @default("development")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  metrics         Metric[]
  traces          Trace[]
  organization_id String
  Organization    Organization? @relation(fields: [organization_id], references: [id])

  @@map("applications")
}

// Metric entity - TimescaleDB hypertable for time-series metrics
model Metric {
  id             String     @default(uuid())
  timestamp      DateTime   @default(now())
  name           String
  value          Float
  type           MetricType
  application_id String
  labels         Json?
  description    String?

  application Application @relation(fields: [application_id], references: [id], onDelete: Cascade)

  @@id([id, timestamp]) // ✅ chave primária composta (requer Prisma 4.0+)
  @@map("metrics")
}

// Trace entity - TimescaleDB hypertable for time-series traces
model Trace {
  id             String     @default(uuid())
  traceId        String
  spanId         String
  parent_span_id String?
  name           String
  kind           SpanKind
  start_time     DateTime
  end_time       DateTime?
  duration       Int? // in nanoseconds
  status         SpanStatus @default(UNSET)
  application_id String
  attributes     Json?
  events         Json?

  // Relations
  application Application @relation(fields: [application_id], references: [id], onDelete: Cascade)

  @@id([id, start_time]) // Composite index for efficient querying
  @@index([traceId])
  @@index([spanId])
  @@index([application_id])
  @@index([start_time])
  @@index([kind])
  @@map("traces")
}

// Enums
enum MetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  SUMMARY
}

enum SpanKind {
  INTERNAL
  SERVER
  CLIENT
  PRODUCER
  CONSUMER
}

enum SpanStatus {
  UNSET
  OK
  ERROR
}

enum UserRole {
  OWNER  @map("owner")
  ADMIN  @map("admin")
  VIEWER @map("viewer")
}

enum Plan {
  FREE_PLAN       @map("free") // Basic plan with limited features
  PREMIUM_PLAN    @map("premium") // Advanced plan with additional features
  ENTERPRISE_PLAN @map("enterprise") // Comprehensive plan for large organizations
  CUSTOM_PLAN     @map("custom") // Tailored plan for specific needs
}
